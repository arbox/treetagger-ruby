#!/usr/bin/env ruby
# rtt - Ruby TreeTagger

require 'tree_tagger/tagger'
require 'tree_tagger/argv_parser'

options = TreeTagger::ARGVParser.parse(ARGV)

tagger = TreeTagger::Tagger.new(options)

# Adding some colors to the output.
# Using ANSI escape codes.
RED   = "\e[31m"
GREEN = "\e[32m"
BLUE  = "\e[34m"
RESET = "\e[0m"

reader = Thread.new do
  beginning = true
  loop do
    result_array = tagger.get_output
    if result_array.nil?
      if beginning
        sleep(0.1)
        next
      else
        break
      end
    end
    sleep(0.2) # Is useful!

    beginning = false
    result_array.each do |tuple|
      tuple = tuple.split("\t")
      
      if $stdout.tty?
        tuple[0].insert(0, RED).insert(-1, RESET)   if tuple[0]
        tuple[1].insert(0, GREEN).insert(-1, RESET) if tuple[1]
        tuple[2].insert(0, BLUE).insert(-1, RESET)  if tuple[2]
      end
      
      # [['token', 'tag', 'lemma'], ['token', 'tag', 'lemma']]`    
      $stdout.puts tuple.join("\t")
    end
  end # loop end
end

# Read all lines from STDOUT or from files.
while line = ARGF.gets
  # Invoke tokenizer somehow here.
  puts line
  tagger.process(line)
end

tagger.flush

reader.join

STDOUT.flush
